<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>有关于前端学习的个人博客</subtitle>
  <link href="/MyBlog/atom.xml" rel="self"/>
  
  <link href="https://qiuyuxiu.github.io/MyBlog/"/>
  <updated>2018-06-08T11:23:36.191Z</updated>
  <id>https://qiuyuxiu.github.io/MyBlog/</id>
  
  <author>
    <name>Daisy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 继承</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-%E7%BB%A7%E6%89%BF/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-继承/</id>
    <published>2018-06-08T11:23:36.000Z</published>
    <updated>2018-06-08T11:23:36.191Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Function类型</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-Function%E7%B1%BB%E5%9E%8B/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-Function类型/</id>
    <published>2018-06-08T11:23:27.000Z</published>
    <updated>2018-06-08T11:23:27.571Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript闭包问题</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript闭包问题/</id>
    <published>2018-06-08T11:23:11.000Z</published>
    <updated>2018-06-08T11:23:11.533Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript BOM</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-BOM/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-BOM/</id>
    <published>2018-06-08T11:22:55.000Z</published>
    <updated>2018-06-08T11:22:56.025Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript DOM</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-DOM/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-DOM/</id>
    <published>2018-06-08T11:22:49.000Z</published>
    <updated>2018-06-08T11:22:49.887Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript DOM扩展</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-DOM%E6%89%A9%E5%B1%95/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-DOM扩展/</id>
    <published>2018-06-08T11:22:44.000Z</published>
    <updated>2018-06-08T11:22:44.082Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript DOM2和DOM3</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-DOM2%E5%92%8CDOM3/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript-DOM2和DOM3/</id>
    <published>2018-06-08T11:22:31.000Z</published>
    <updated>2018-06-08T11:22:31.344Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript事件</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript%E4%BA%8B%E4%BB%B6/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JavaScript事件/</id>
    <published>2018-06-08T11:22:05.000Z</published>
    <updated>2018-06-08T11:22:05.633Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP状态码与方法</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/HTTP状态码与方法/</id>
    <published>2018-06-08T11:21:20.000Z</published>
    <updated>2018-06-08T11:21:20.422Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP报文</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/HTTP%E6%8A%A5%E6%96%87/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/HTTP报文/</id>
    <published>2018-06-08T11:19:33.000Z</published>
    <updated>2018-06-08T11:19:33.604Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>304状态码理解</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/304%E7%8A%B6%E6%80%81%E7%A0%81%E7%90%86%E8%A7%A3/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/304状态码理解/</id>
    <published>2018-06-08T11:19:16.000Z</published>
    <updated>2018-06-08T11:19:16.240Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用nvm管理node版本</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/使用nvm管理node版本/</id>
    <published>2018-06-08T11:18:13.000Z</published>
    <updated>2018-06-08T11:18:13.485Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery多种插件使用说明</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/jQuery%E5%A4%9A%E7%A7%8D%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/jQuery多种插件使用说明/</id>
    <published>2018-06-08T11:17:55.000Z</published>
    <updated>2018-06-08T11:17:55.538Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html知识点</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/html%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/html知识点/</id>
    <published>2018-06-08T11:17:33.000Z</published>
    <updated>2018-06-08T11:17:33.349Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内存泄漏问题</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/内存泄漏问题/</id>
    <published>2018-06-08T08:53:07.000Z</published>
    <updated>2018-06-08T08:53:07.783Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>手写promise</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/%E6%89%8B%E5%86%99promise/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/手写promise/</id>
    <published>2018-06-08T08:52:57.000Z</published>
    <updated>2018-06-08T08:52:58.018Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSONP</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/JSONP/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/JSONP/</id>
    <published>2018-06-08T08:52:46.000Z</published>
    <updated>2018-06-08T08:52:46.608Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http三个版本</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/http%E4%B8%89%E4%B8%AA%E7%89%88%E6%9C%AC/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/http三个版本/</id>
    <published>2018-06-08T08:52:34.000Z</published>
    <updated>2018-06-08T08:52:34.088Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>长连接&amp;短连接&amp;长轮询&amp;短轮询</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E8%BF%9E%E6%8E%A5-%E9%95%BF%E8%BD%AE%E8%AF%A2-%E7%9F%AD%E8%BD%AE%E8%AF%A2/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/长连接-短连接-长轮询-短轮询/</id>
    <published>2018-06-08T08:52:19.000Z</published>
    <updated>2018-06-08T08:52:19.904Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2017/06/17/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2017/06/17/JavaScript-面向对象/</id>
    <published>2017-06-17T01:23:49.000Z</published>
    <updated>2018-06-09T07:07:44.779Z</updated>
    
    <content type="html"><![CDATA[<p>属性类型<br>要修改对象的属性的默认的特性，必须使用Object.defineProperty() 方法。这个方法接受三个参数：属性所在的对象，属性的名字，一个描述符对象。描述符对象的属性必须是configurable,enumberable,writable,value。在不指定情况下，configurable,enumberable,writable这三个属性都是默认为false。<br>configurable设置为false 表示不能从对象中删除属性。writable设置为false表示是只读的，不能对属性进行赋值。enumberable表示能否通过for-in循环返回属性。</p><p>访问器属性<br>在读取访问器属性时，会调用getter函数；在写入访问器属性时，会调用setter函数并传入新值。<br>访问器属性不能直接定义，必须使用Object.defineProperty()来定义。</p><p>var book={<br>    _year:2004,<br>    edition:1<br>};<br>Object.defineProperty(book,”year”,{<br>    get:function(){<br>        return this._year;<br>    },<br>    set:function(newValue){<br>        if(newValue&gt;2004){<br>            this._year=newValue;<br>            this.edition+=newValue-2004;<br>        }<br>    }<br>});<br>book.year=2005;<br>alert(book.edition);//2<br>定义多个属性：Object.defineProperties()方法。<br>读取属性的特征：Object.getOwnPropertyDescriptor()方法。</p><p>var book={<br>};<br>Object.defineProperties(book,{<br>    _year:{<br>        value:2004,<br>        writable: true//这个必须写，不然不能下面book.year没有启用而起作用弹出2007，不然就弹出2004<br>    },<br>    edition:{<br>        value:1<br>    },<br>    year:{<br>        get:function(){<br>            return this._year;<br>        },<br>        set:function(newValue){<br>            if(newValue&gt;2004){<br>                this._year=newValue;<br>                this.edition+=newValue-2004;<br>            }<br>        },<br>    }<br>});<br>var descriptor=Object.getOwnPropertyDescriptor(book,”_year”);<br>alert(descriptor.value);//2004<br>alert(descriptor.configurable);//false<br>book.year=2007;<br>alert(book._year);//2007<br>创建对象<br>1.工厂模式：</p><p>function createPerson(name,age,job){<br>    var o=new Object();<br>    o.name=name;<br>    o.age=age;<br>    o.job=job;<br>    o.sayName=function(){<br>        alert(this.name);<br>    };<br>    return o;<br>}<br>var person1=createPerson(“Nick”,29,”Engineer”);<br>var person2=createPerson(“Greg”,27,”Doctor”);<br>person1.sayName();//Nick<br>alert(person2.name);//Greg<br>2.构造函数模式:</p><p>function Person(name,age,job){<br>    this.name=name;<br>    this.age=age;<br>    this.job=job;<br>    this.sayName=function(){<br>        alert(this.name);<br>    }<br>}<br>var person1=new Person(“Nick”,29,”Engineer”);<br>var person2=new Person(“Greg”,27,”Doctor”);<br>person1.sayName();//Nick<br>alert(person2.name);//Greg<br>3.原型模式</p><p>function Person(){<br>}<br>Person.prototype.name=”Nike”;<br>Person.prototype.age=29;<br>Person.prototype.job=”Engineer”;<br>Person.prototype.sayName=function(){<br>    alert(this.name);<br>};<br>var person1=new Person();<br>person1.sayName();//Nike<br>var person2=new Person();<br>person2.sayName();//Nike<br>alert(person1.sayName==person2.sayName);//true<br>hasOwnProperty() 方法可以检测一个属性是否存在于实例中，还是存在于原型中。如果存在于对象实例中，则返回true。<br>hasPrototypeProperty() 方法可以检测一个属性是否存在于实例中，还是存在于原型中。如果存在于对象原型中，则返回true。<br>Object.keys() 方法接受一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。</p><p>更简单的原型语法：</p><p>function Person(){<br>}<br>Person.prototype={<br>  name: “Nike”,<br>  age: 29,<br>  job: “Engineer”,<br>  sayName: function(){<br>    alert(this.name);<br>  }<br>};<br>原型对象的问题：</p><p>function Person(){<br>}<br>Person.prototype={<br>  constructor: Person,<br>  name: “Nike”,<br>  job: “Engineer”,<br>  friends: [“Shelby”,”Court”],<br>  sayName: function(){<br>    alert(this.name);<br>  }<br>};<br>var person1=new Person();<br>var person2=new Person();<br>person1.friends.push(“Van”);<br>alert(person1.friends);//Shelby,Court,Van<br>alert(person2.friends);//Shelby,Court,Van<br>alert(person1.friends==person2.friends);//true<br>可以看到当改变一个对象的friends时，其他的对象的friends也跟着改变friends数组存在于person.prototype中，而不是存在于person1中，所以当改变person1的friends时候，person2的friends也变化。<br>4.组合使用构造函数模式和原型模式：构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。<br><code>`</code>js<br>function Person(name,age,job){<br>  this.name=name;<br>  this.age=age;<br>  this.job=job;<br>  this.friends=[“Shelby”,”Court”];<br>}<br>Person.prototype={<br>  constructor: Person,<br>  sayName: function(){<br>    alert(this.name);<br>  }<br>}<br>var person1=new Person(“Nike”,29,”Engineer”);<br>var person2=new Person(“Greg”,27,”Doctor”);<br>person1.friends.push(“Van”);<br>alert(person1.friends);//Shelby,Court,Van<br>alert(person2.friends);//Shelby,Court<br>alert(person1.friends==person2.friends);//false<br>alert(person1.sayName==person2.sayName);//true<br>5.动态原型模式<br>可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。</p><p>function Person(name, age, job) {<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    if(typeof this.sayName != “function”) { //在sayName()方法不存在的情况下，才会将它添加到原型中。instanceof操作符也可以<br>        Person.prototype.sayName = function() {<br>            alert(this.name);<br>        };<br>    }<br>}<br>var friend = new Person(“Nike”, 29, “Engineer”);<br>friend.sayName();//Nike</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;属性类型&lt;br&gt;要修改对象的属性的默认的特性，必须使用Object.defineProperty() 方法。这个方法接受三个参数：属性所在的对象，属性的名字，一个描述符对象。描述符对象的属性必须是configurable,enumberable,writable,value
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://qiuyuxiu.github.io/MyBlog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://qiuyuxiu.github.io/MyBlog/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
