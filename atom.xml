<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>有关于前端学习的个人博客</subtitle>
  <link href="/MyBlog/atom.xml" rel="self"/>
  
  <link href="https://qiuyuxiu.github.io/MyBlog/"/>
  <updated>2020-06-20T06:52:51.414Z</updated>
  <id>https://qiuyuxiu.github.io/MyBlog/</id>
  
  <author>
    <name>Daisy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BI可视化配表开发记录</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2020/06/20/BI%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E8%A1%A8%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2020/06/20/BI可视化配表开发记录/</id>
    <published>2020-06-20T06:52:51.000Z</published>
    <updated>2020-06-20T06:52:51.414Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue项目性能优化总结</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2019/01/09/vue%E9%A1%B9%E7%9B%AE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2019/01/09/vue项目性能优化总结/</id>
    <published>2019-01-09T06:46:49.000Z</published>
    <updated>2020-06-20T07:03:40.051Z</updated>
    
    <content type="html"><![CDATA[<p>在开发vue项目的时候，随着项目越来越庞大，首屏加载时间变长，加载的网络资源也比较多，对系统的体验性会差一点，因此性能优化是必不可少的工作。以下是我个人在学习和实践中对性能优化的总结。</p><h2 id="1-代码层面优化"><a href="#1-代码层面优化" class="headerlink" title="1. 代码层面优化"></a>1. 代码层面优化</h2><h3 id="1-1-v-if-和-v-show-区分使用场景"><a href="#1-1-v-if-和-v-show-区分使用场景" class="headerlink" title="1.1 v-if 和 v-show 区分使用场景"></a>1.1 v-if 和 v-show 区分使用场景</h3><p>v-if是懒加载，当状态为true时才会加载，并且为false时不会占用布局空间，适用于在运行时很少频繁切换条件或者需要根据权限展示或者隐藏的场景。</p><p>v-show是无论状态是true或者是false，都会进行渲染，并对布局占据空间，只是简单地基于CSS的display属性进行切换，适用于需要非常频繁切换条件的场景，这样可以减少系统的回流重绘开销。</p><h3 id="1-2-computed和watch区分使用场景"><a href="#1-2-computed和watch区分使用场景" class="headerlink" title="1.2 computed和watch区分使用场景"></a>1.2 computed和watch区分使用场景</h3><p>computed是计算属性，依赖其它属性值，并且computed的值有缓存，只有当它依赖的属性值发生改变时，下一次获取computed的值时才会重新计算该值；当我们需要进行数值计算，并且依赖于其它数据时，应该使用computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算；</p><p>watch是observe的作用，当数据发生变化的时候，watch就会监听到，然后执行回调进行后续操作。当我们需要在数据变化时执行异步或开销较大的操作时，应该使用watch，使用watch选项允许我们执行异步操作，这些都是计算属性无法做到的。但是使用watch的时候，当watch的数据比较小，性能消耗不明显。当数据变大，系统就会出现卡顿，所以使用watch的时候尽量减少watch的数据。</p><h3 id="1-3-v-for遍历必须添加key，且避免同时使用v-if"><a href="#1-3-v-for遍历必须添加key，且避免同时使用v-if" class="headerlink" title="1.3 v-for遍历必须添加key，且避免同时使用v-if"></a>1.3 v-for遍历必须添加key，且避免同时使用v-if</h3><p>在列表数据进行遍历渲染时，需要为每一项item设置唯一key值，方便vuejs内部机制精准找到该条列表数据。当state更新时，新的状态值和旧的状态值对比，较快地定位到diff。</p><p>v-for比v-if优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成computed属性。</p><h3 id="1-4-使用Object-freeze冻结纯展示数据"><a href="#1-4-使用Object-freeze冻结纯展示数据" class="headerlink" title="1.4 使用Object.freeze冻结纯展示数据"></a>1.4 使用Object.freeze冻结纯展示数据</h3><p>Vue会通过Object.defineProperty对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要Vue来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，这样我们可以通过Object.freeze方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。像表格数据，列表展示数据，可以使用Object.freeze，可以减少了observer的开销。</p><h3 id="1-5-细分vuejs组件"><a href="#1-5-细分vuejs组件" class="headerlink" title="1.5 细分vuejs组件"></a>1.5 细分vuejs组件</h3><p>在项目开发过程之中，第一版本把所有的组件的布局写在一个组件中，当数据变更时，由于组件代码比较庞大，vuejs的数据驱动视图更新比较慢，造成渲染比较慢。造成比较差的体验效果。所以把组件细分，比如一个组件，可以把整个组件细分成列表组件、分页组件、展示item组件等。</p><h3 id="1-6-图片资源懒加载"><a href="#1-6-图片资源懒加载" class="headerlink" title="1.6 图片资源懒加载"></a>1.6 图片资源懒加载</h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载，等到滚动到可视区域后再去加载。这样对页面加载性能上会有很大的提升，也提高了用户体验。可以先使用v-lazy之类的懒加载库或者绑定鼠标的scroll事件，滚动到可视区域先再对数据进行加载显示，减少系统加载的数据。</p><h3 id="1-7-对无限列表使用懒加载渲染"><a href="#1-7-对无限列表使用懒加载渲染" class="headerlink" title="1.7 对无限列表使用懒加载渲染"></a>1.7 对无限列表使用懒加载渲染</h3><p>在项目中我是封装了懒加载列表组件，自定义scroll指令，对Select选择器的options数据和列表数据过多进行了懒加载处理，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  Vue.directive(<span class="string">'select-scroll'</span>, &#123;</span><br><span class="line">    bind(el, binding) &#123;</span><br><span class="line">      <span class="keyword">const</span> SCROLL_DOM = el.querySelector(<span class="string">'.ivu-select-dropdown'</span>);</span><br><span class="line">      addScrollEvent(SCROLL_DOM, binding);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Vue.directive(<span class="string">'scroll'</span>, &#123;</span><br><span class="line">    bind(el, binding) &#123;</span><br><span class="line">      addScrollEvent(el, binding);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScrollEvent</span>(<span class="params">dom, binding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> scrollPosition = <span class="number">0</span>;</span><br><span class="line">  dom.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> flagToDirection = <span class="keyword">this</span>.scrollTop - scrollPosition &gt; <span class="number">0</span>; <span class="comment">// true则代表向下滚动，false代表向上滚动</span></span><br><span class="line">    scrollPosition = <span class="keyword">this</span>.scrollTop;</span><br><span class="line">    <span class="keyword">const</span> LIMIT_BOTTOM = <span class="keyword">this</span>.scrollHeight / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> scrollBottom = <span class="keyword">this</span>.scrollHeight - (<span class="keyword">this</span>.scrollTop + <span class="keyword">this</span>.clientHeight); <span class="comment">// 记录滚动位置距离底部的位置</span></span><br><span class="line">    <span class="keyword">if</span> (flagToDirection &amp;&amp; scrollBottom &lt; LIMIT_BOTTOM) &#123;</span><br><span class="line">      binding.value(flagToDirection, scrollBottom);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flagToDirection &amp;&amp; <span class="keyword">this</span>.scrollTop &lt; LIMIT_BOTTOM) &#123;</span><br><span class="line">      binding.value(flagToDirection, <span class="keyword">this</span>.scrollTop);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后再监听v-scroll事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">buildShowList() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.listPage === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.showList = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.list &amp;&amp; <span class="keyword">this</span>.list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pageIndex = <span class="keyword">this</span>.listPage * <span class="keyword">this</span>.listNum;</span><br><span class="line">    <span class="keyword">this</span>.showList.push(...this.list.slice(pageIndex, pageIndex + <span class="keyword">this</span>.listNum));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">handleScroll(direction) &#123;</span><br><span class="line">  <span class="keyword">if</span> (direction &amp;&amp; <span class="keyword">this</span>.list.length / <span class="keyword">this</span>.listNum &gt; <span class="keyword">this</span>.listPage) &#123;</span><br><span class="line">    <span class="keyword">this</span>.listPage = <span class="keyword">this</span>.listPage + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.buildShowList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-8-组件懒加载"><a href="#1-8-组件懒加载" class="headerlink" title="1.8 组件懒加载"></a>1.8 组件懒加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Foo.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Bar = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Bar.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Baz = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Baz.vue'</span>)</span><br></pre></td></tr></table></figure><h2 id="2-打包层面优化"><a href="#2-打包层面优化" class="headerlink" title="2. 打包层面优化"></a>2. 打包层面优化</h2><h3 id="2-1-屏蔽sourceMap"><a href="#2-1-屏蔽sourceMap" class="headerlink" title="2.1 屏蔽sourceMap"></a>2.1 屏蔽sourceMap</h3><p>使用sourceMap打包，一方面会增大上线代码包的大小，严重影响首屏加载时间；另一方面影响系统的安全性。<br>vue-cli脚手架在上线配置文件会自动设置允许sourceMap打包，所以在上线前可以屏蔽sourceMap。在配置中设置productionSourceMap为false即可。</p><h3 id="2-2-对项目代码中的JS-CSS-SVG-ico-文件进行gzip压缩"><a href="#2-2-对项目代码中的JS-CSS-SVG-ico-文件进行gzip压缩" class="headerlink" title="2.2 对项目代码中的JS/CSS/SVG(*.ico)文件进行gzip压缩"></a>2.2 对项目代码中的JS/CSS/SVG(*.ico)文件进行gzip压缩</h3><p>在vue-cli脚手架的配置信息中，有对代码进行压缩的配置项。通过 <code>npm install --save-dev compression-webpack-plugin</code>下载该依赖，然后通过以下配置进行压缩<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">productionGzip: <span class="literal">true</span>,</span><br><span class="line">productionGzipExtensions: [<span class="string">'js'</span>, <span class="string">'css'</span>,<span class="string">'svg'</span>], <span class="comment">//设置需要进行压缩的文件格式</span></span><br></pre></td></tr></table></figure></p><p>gzip会对js、css文件进行压缩处理；对于图片进行压缩问题，对于png，jpg，jpeg没有压缩效果，对于svg，ico文件以及bmp文件压缩效果达到50%。对项目文件进行压缩之后，需要浏览器客户端支持gzip以及后端支持gzip。</p><h3 id="2-3-打包拆分"><a href="#2-3-打包拆分" class="headerlink" title="2.3 打包拆分"></a>2.3 打包拆分</h3><p>像一些工具库lodash这样的很多文件会共用，像这样相同的资源被重复的加载，浪费用户的流量和服务器的成本。每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。如果能把公共代码抽离成单独文件进行加载，可以减少网络传输流量，降低服务器成本。可以使用webpack的splitChunks配置进行分割代码和提取公共包。<br>基础配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">'all'</span> <span class="comment">// 分割代码</span></span><br><span class="line">  &#125;,</span><br><span class="line">  runtimeChunk: <span class="literal">true</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><p>webpack.base.config.js提取配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">      commons: &#123;</span><br><span class="line">        chunks: <span class="string">'initial'</span>,</span><br><span class="line">        minChunks: <span class="number">2</span>,</span><br><span class="line">        maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">        minSize: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      vendor: &#123; <span class="comment">// 将第三方模块提取出来</span></span><br><span class="line">        test: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        chunks: <span class="string">'initial'</span>,</span><br><span class="line">        name: <span class="string">'vendor'</span>,</span><br><span class="line">        priority: <span class="number">10</span>, <span class="comment">// 优先</span></span><br><span class="line">        enforce: <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">其他详细配置可见</a></p><p>可将比较大的依赖拆分打包，比如：echarts， xlsx，tinymce等，在使用的时候使用异步加载。<br>示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">     splitChunks: &#123; <span class="comment">// https://webpack.js.org/plugins/split-chunks-plugin</span></span><br><span class="line">       cacheGroups: &#123;</span><br><span class="line">         chart: &#123;</span><br><span class="line">           name: <span class="string">'vendor-chart'</span>,</span><br><span class="line">           test: <span class="regexp">/[\\/]node_modules[\\/](echarts|zrender|v-charts|numerify)[\\/]/</span>,</span><br><span class="line">           priority: <span class="number">3</span>,</span><br><span class="line">           chunks: <span class="string">'all'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         xlsx: &#123;</span><br><span class="line">           name: <span class="string">'vendor-xlsx'</span>,</span><br><span class="line">           test: <span class="regexp">/[\\/]node_modules[\\/]xlsx[\\/]/</span>,</span><br><span class="line">           priority: <span class="number">3</span>,</span><br><span class="line">           chunks: <span class="string">'all'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         tinymce: &#123;</span><br><span class="line">           name: <span class="string">'vendor-tinymce'</span>,</span><br><span class="line">           test: <span class="regexp">/[\\/]node_modules[\\/]@?tinymce[\\/]/</span>,</span><br><span class="line">           priority: <span class="number">3</span>,</span><br><span class="line">           chunks: <span class="string">'all'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         vendor: &#123;</span><br><span class="line">           name: <span class="string">'vendor'</span>,</span><br><span class="line">           test: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">//在node_modules范围内进行匹配</span></span><br><span class="line">           priority: <span class="number">2</span>, <span class="comment">//优先级，先抽离公共的第三方库，再抽离业务代码，值越大优先级越高</span></span><br><span class="line">           chunks: <span class="string">'all'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         common: &#123;</span><br><span class="line">           name: <span class="string">'common'</span>,</span><br><span class="line">           chunks: <span class="string">'all'</span>,</span><br><span class="line">           minSize: <span class="number">30</span>,</span><br><span class="line">           minChunks: <span class="number">2</span>,</span><br><span class="line">           priority: <span class="number">1</span> <span class="comment">//优先级</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>对于拆分的模块过多，像一些几k的拆分出来导致文件过多也不是很好，可以使用CompressionPlugin配置模块打包规则：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">     <span class="keyword">new</span> CompressionPlugin(&#123; <span class="comment">// https://www.npmjs.com/package/compression-webpack-plugin</span></span><br><span class="line">       test: <span class="regexp">/\.(js|css)$/</span>,</span><br><span class="line">       threshold: <span class="number">100</span> * <span class="number">1040</span>, <span class="comment">// 大于100K的文件才做压缩</span></span><br><span class="line">       deleteOriginalAssets: <span class="literal">false</span></span><br><span class="line">     &#125;)</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>最近研究懒加载的实现策略，发现Web API（Intersection Observer）很适合实现懒加载。并且性能比滚动监听好一些</p><p>说明：<br>IntersectionObserver接口 (从属于Intersection Observer API) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法。祖先元素与视窗(viewport)被称为根(root)。</p><p>具体使用方法见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发vue项目的时候，随着项目越来越庞大，首屏加载时间变长，加载的网络资源也比较多，对系统的体验性会差一点，因此性能优化是必不可少的工作。以下是我个人在学习和实践中对性能优化的总结。&lt;/p&gt;
&lt;h2 id=&quot;1-代码层面优化&quot;&gt;&lt;a href=&quot;#1-代码层面优化&quot; cl
      
    
    </summary>
    
      <category term="vue优化" scheme="https://qiuyuxiu.github.io/MyBlog/categories/vue%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="vue" scheme="https://qiuyuxiu.github.io/MyBlog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>es6解构</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2019/01/08/es6%E8%A7%A3%E6%9E%84/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2019/01/08/es6解构/</id>
    <published>2019-01-08T11:41:43.000Z</published>
    <updated>2019-10-08T12:33:18.390Z</updated>
    
    <content type="html"><![CDATA[<p>es6解构可以快速取得数组或对象当中的元素或属性。</p><h6 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'test'</span>, <span class="number">2</span>, <span class="literal">false</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">const</span> a = array[<span class="number">0</span>], b = array[<span class="number">1</span>], c = array[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6解构赋值</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = array;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// test</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h6 id="嵌套数组解构"><a href="#嵌套数组解构" class="headerlink" title="嵌套数组解构"></a>嵌套数组解构</h6><ul><li>赋值和解构格式一一对应<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [[<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]], <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> [[a, [b, c]], d] = array;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="函数传参解构"><a href="#函数传参解构" class="headerlink" title="函数传参解构"></a>函数传参解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'test'</span>, <span class="number">2</span>, <span class="literal">false</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">[args1, args2, args3]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args1); <span class="comment">// test</span></span><br><span class="line">    <span class="built_in">console</span>.log(args2); <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(args3); <span class="comment">// false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">func(array);</span><br></pre></td></tr></table></figure><h6 id="for循环解构"><a href="#for循环解构" class="headerlink" title="for循环解构"></a>for循环解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">11</span>, <span class="number">12</span>], [<span class="number">21</span>, <span class="number">22</span>]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [a, b] <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 11 12 21 22</span></span><br></pre></td></tr></table></figure><h6 id="对象赋值解构"><a href="#对象赋值解构" class="headerlink" title="对象赋值解构"></a>对象赋值解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">    name: <span class="string">'dog'</span>,</span><br><span class="line">    sex: <span class="string">'male'</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    like: [<span class="string">'apple'</span>, <span class="string">'pair'</span>],</span><br><span class="line">    son: &#123;</span><br><span class="line">      sonName: <span class="string">'dog1'</span>,</span><br><span class="line">      sonAge: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, sex, age, like&#125; = animal; <span class="comment">// dog male 12 ['apple', 'pair']</span></span><br><span class="line"><span class="comment">// 变量名与对象属性名不一致</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: name1, <span class="attr">sex</span>: sex1, <span class="attr">age</span>: age1, <span class="attr">like</span>: like1&#125; = animal; <span class="comment">// dog male 2 ['apple', 'pair']</span></span><br><span class="line"><span class="comment">// func 传参</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">&#123;name, sex, like&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(like);</span><br><span class="line">&#125;;</span><br><span class="line">func(animal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套对象解构</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, <span class="attr">son</span>: &#123;sonName, sonAge&#125;&#125; = animal;</span><br><span class="line"><span class="comment">// 对嵌套数组不支持</span></span><br></pre></td></tr></table></figure><h6 id="循环解构对象"><a href="#循环解构对象" class="headerlink" title="循环解构对象"></a>循环解构对象</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [&#123;<span class="attr">name</span>: <span class="string">'chris'</span>, <span class="attr">age</span>: <span class="number">26</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'jack'</span>,    <span class="attr">age</span>: <span class="number">27</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'peter'</span>,<span class="attr">age</span>: <span class="number">28</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123;age, name&#125; <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name + <span class="string">' '</span> + age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array.map(<span class="function">(<span class="params">&#123;name, age&#125;</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(name + <span class="string">' '</span> + age)&#125;)</span><br></pre></td></tr></table></figure><h6 id="变量互换"><a href="#变量互换" class="headerlink" title="变量互换"></a>变量互换</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> [x, y] = [y, x];</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h6 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'test'</span>;</span><br><span class="line"><span class="keyword">const</span> [a, b, c, d] = str;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//t</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//e</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//s</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//t</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;es6解构可以快速取得数组或对象当中的元素或属性。&lt;/p&gt;
&lt;h6 id=&quot;数组解构赋值&quot;&gt;&lt;a href=&quot;#数组解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组解构赋值&quot;&gt;&lt;/a&gt;数组解构赋值&lt;/h6&gt;&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="ES6" scheme="https://qiuyuxiu.github.io/MyBlog/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://qiuyuxiu.github.io/MyBlog/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>URL编码解码</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/12/15/URL%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/12/15/URL编码解码/</id>
    <published>2018-12-15T08:32:08.000Z</published>
    <updated>2018-12-15T08:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>js对url进行编码和解码（三种方式区别）<br>1、escape 和 unescape<br>原理：对除ASCII字母、数字、标点符号 @  *  _  +  -  .  / 以外的其他字符进行编码。 </p><p>2、encodeURI 和 decodeURI<br>原理：返回编码为有效的统一资源标识符 (URI) 的字符串，不会被编码的字符：! @ # $ &amp; * ( ) = : / ; ? + ‘<br>encodeURI()是Javascript中真正用来对URL编码的函数。</p><p>3、encodeURIComponent 和 decodeURIComponent<br>原理：对URL的组成部分进行个别编码，而不用于对整个URL进行编码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js对url进行编码和解码（三种方式区别）&lt;br&gt;1、escape 和 unescape&lt;br&gt;原理：对除ASCII字母、数字、标点符号 @  *  _  +  -  .  / 以外的其他字符进行编码。 &lt;/p&gt;
&lt;p&gt;2、encodeURI 和 decodeURI&lt;br&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="url" scheme="https://qiuyuxiu.github.io/MyBlog/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>npm依赖包版本管理</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/12/15/npm%E4%BE%9D%E8%B5%96%E5%8C%85%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/12/15/npm依赖包版本管理/</id>
    <published>2018-12-15T07:54:32.000Z</published>
    <updated>2018-12-15T08:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖包版本管理"><a href="#依赖包版本管理" class="headerlink" title="依赖包版本管理"></a>依赖包版本管理</h2><ul><li>semver</li></ul><p>npm 依赖管理的一个重要特性是采用了语义化版本 (semver) 规范，作为依赖版本管理方案。<br>semver 约定一个包的版本号必须包含3个数字，格式必须为 MAJOR.MINOR.PATCH, 意为 主版本号.小版本号.修订版本号.  </p><ol><li>MAJOR 对应大的版本号迭代，做了不兼容旧版的修改时要更新 MAJOR 版本号  </li><li>MINOR 对应小版本迭代，发生兼容旧版API的修改或功能更新时，更新MINOR版本号  </li><li>PATCH 对应修订版本号，一般针对修复 BUG 的版本号  </li></ol><p>对于包作者（发布者），npm 要求在 publish 之前，必须更新版本号。npm 提供了 npm version 工具，执行 npm version major|minor|patch 可以简单地将版本号中相应的数字加1。<br>如果包是一个 git 仓库，npm version 还会自动创建一条注释为更新后版本号的 git commit 和名为该版本号的 tag。<br>对于包的引用者来说，我们需要在 dependencies 中使用 semver 约定的 semver range 指定所需依赖包的版本号或版本范围。npm 提供了网站 <a href="https://semver.npmjs.com" target="_blank" rel="noopener">https://semver.npmjs.com</a> 可方便地计算所输入的表达式的匹配范围。常用的规则示例如下表：<br><img src="../../../../images/npm2.png" alt="npm依赖包版本规则">  </p><ol><li>任意两条规则，用空格连接起来，表示“与”逻辑，即两条规则的交集:<br>如 &gt;=2.3.1 &lt;=2.8.0 可以解读为: &gt;=2.3.1 且 &lt;=2.8.0  </li></ol><ul><li>可以匹配 2.3.1, 2.4.5, 2.8.0  </li><li>但不匹配 1.0.0, 2.3.0, 2.8.1, 3.0.0</li></ul><ol start="2"><li>任意两条规则，通过 || 连接起来，表示“或”逻辑，即两条规则的并集:<br>如 ^2 &gt;=2.3.1 || ^3 &gt;3.2  </li></ol><ul><li>可以匹配 2.3.1, 2,8.1, 3.3.1  </li><li>但不匹配 1.0.0, 2.2.0, 3.1.0, 4.0.0</li></ul><ol start="3"><li>除了这几种，还有如下更直观的表示版本号范围的写法:</li></ol><ul><li>* 或 x 匹配所有主版本</li><li>1 或 1.x 匹配 主版本号为 1 的所有版本</li><li>1.2 或 1.2.x 匹配 版本号为 1.2 开头的所有版本</li></ul><ol start="4"><li>在常规仅包含数字的版本号之外，semver 还允许在 MAJOR.MINOR.PATCH 后追加 - 后跟点号分隔的标签，作为预发布版本标签 - Prerelese Tags，通常被视为不稳定、不建议生产使用的版本。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.0.0-alpha</span><br><span class="line">1.0.0-beta.1</span><br><span class="line">1.0.0-rc.3</span><br></pre></td></tr></table></figure></li></ol><p>我们最常见的是 ^1.8.11 这种格式的 range, 因为我们在使用 <code>npm install &lt;package name&gt;</code> 安装包时，npm 默认安装当前最新版本，例如 1.8.11, 然后在所安装的版本号前加^号, 将 ^1.8.11 写入 package.json 依赖配置，意味着可以匹配 1.8.11 以上，2.0.0 以下的所有版本。</p><h2 id="依赖版本升级"><a href="#依赖版本升级" class="headerlink" title="依赖版本升级"></a>依赖版本升级</h2><p>在安装完一个依赖包之后有新版本发布了，如何使用 npm 进行版本升级呢？——答案是简单的 npm install 或 npm update，但在不同的 npm 版本，不同的 package.json, package-lock.json 文件，安装/升级的表现也不同。<br>以 webpack 举例，做如下的前提假设:  </p><ol><li>我们的工程项目 app 依赖 webpack</li><li>项目最初初始化时，安装了当时最新的包 <a href="mailto:webpack@1.8.0" target="_blank" rel="noopener">webpack@1.8.0</a>，并且 package.json 中的依赖配置为: “webpack”: “^1.8.0”</li><li>当前（2018年3月） webpack 最新版本为 4.2.0, webpack 1.x 最新子版本为 1.15.0</li><li>如果使用的是 npm 3, 并且项目不含 package-lock.json, 那么根据 node_modules 是否为空，执行 install/update 的结果如下 (node 6.13.1, npm 3.10.10 环境下试验):<br><img src="../../../../images/npm3.png" alt="npm3版本下管理"></li></ol><p>根据这个表可以对 npm 3 得出以下结论：  </p><ol><li>如果本地 node_modules 已安装，再次执行 install 不会更新包版本, 执行 update 才会更新; 而如果本地 node_modules 为空时，执行 install/update 都会直接安装更新包;</li><li>npm update 总是会把包更新到符合 package.json 中指定的 semver 的最新版本号——本例中符合 ^1.8.0 的最新版本为 1.15.0;</li><li>一旦给定 package.json, 无论后面执行 npm install 还是 update, package.json 中的 webpack 版本一直顽固地保持一开始的 ^1.8.0 岿然不动。</li></ol><p>这里不合理的地方在于，如果最开始团队中第一个人安装了 <a href="mailto:webpack@1.8.0" target="_blank" rel="noopener">webpack@1.8.0</a>, 而新加入项目的成员, checkout 工程代码后执行 npm install 会安装得到不太一样的 1.15.0 版本。虽然 semver 约定了小版本号应当保持向下兼容（相同大版本号下的小版本号）兼容，但万一有不熟悉不遵循此约定的包发布者，发布了不兼容的包，此时就可能出现因依赖环境不同导致的 bug。  </p><p>下面由 npm 5 带着 package-lock.json 闪亮登场，执行 install/update 的效果是这样的 (node 9.8.0, npm 5.7.1 环境下试验):<br><img src="../../../../images/npm4.png" alt="npm5]版本下管理"><img src="../../../../images/npm5.png" alt="npm5]版本下管理"></p><p>与 npm 3 相比，在安装和更新依赖版本上主要的区别为：  </p><ol><li>无论何时执行 install, npm 都会优先按照 package-lock 中指定的版本来安装 webpack; 避免了 npm 3 表中情形 b) 的状况;</li><li>无论何时完成安装/更新, package-lock 文件总会跟着 node_modules 更新 —— (因此可以视 package-lock 文件为 node_modules 的 JSON 表述)</li><li>已安装 node_modules 后若执行 npm update，package.json 中的版本号也会随之更改为 ^1.15.0<br>由此可见 npm 5.1 使得 package.json 和 package-lock.json 中所保存的版本号更加统一，解决了 npm 之前的各种问题。只要遵循好的实践习惯，团队成员可以很方便地维护一套应用代码和 node_modules 依赖都一致的环境。</li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>总结起来，在 2018 年 (node 9.8.0, npm 5.7.1) 时代，我认为的依赖版本管理应当是:<br>使用 npm: &gt;=5.1 版本, 保持 package-lock.json 文件默认开启配置。  </p><ol><li>初始化：第一作者初始化项目时使用 <code>npm install &lt;package&gt;</code> 安装依赖包, 默认保存 ^X.Y.Z 依赖 range 到 package.json中; 提交 package.json, package-lock.json, 不要提交 node_modules 目录。</li><li>初始化：项目成员首次 checkout/clone 项目代码后，执行一次 npm install 安装依赖包</li><li>不要手动修改 package-lock.json</li></ol><p>升级依赖包:</p><ol><li>升级小版本: 本地执行 npm update 升级到新的小版本  </li><li>升级大版本: 本地执行 <code>npm install &lt;package-name&gt;@&lt;version&gt;</code> 升级到新的大版本</li><li>也可手动修改 package.json 中版本号为要升级的版本(大于现有版本号)并指定所需的 semver, 然后执行<code>npm install</code><br>本地验证升级后新版本无问题后，提交新的 package.json, package-lock.json 文件</li></ol><p>降级依赖包:</p><ol><li>正确: <code>npm install &lt;package-name&gt;@&lt;old-version&gt;</code> 验证无问题后，提交 package.json 和 package-lock.json 文件</li><li>错误: 手动修改 package.json 中的版本号为更低版本的 semver, 这样修改并不会生效，因为再次执行 npm install 依然会安装 package-lock.json 中的锁定版本</li></ol><p>删除依赖包:</p><ol><li>Plan A: <code>npm uninstall &lt;package&gt;</code> 并提交 package.json 和 package-lock.json</li><li>Plan B: 把要卸载的包从 package.json 中 dependencies 字段删除, 然后执行 npm install 并提交 package.json 和 package-lock.json</li></ol><p>任何时候有人提交了 package.json, package-lock.json 更新后，团队其他成员应在 svn update/git pull 拉取更新后执行 npm install 脚本安装更新后的依赖包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;依赖包版本管理&quot;&gt;&lt;a href=&quot;#依赖包版本管理&quot; class=&quot;headerlink&quot; title=&quot;依赖包版本管理&quot;&gt;&lt;/a&gt;依赖包版本管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;semver&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;npm 依赖管理的一个重要特性是采用了语义化
      
    
    </summary>
    
      <category term="前端" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="https://qiuyuxiu.github.io/MyBlog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>npm知识</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/12/15/npm%E7%9F%A5%E8%AF%86/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/12/15/npm知识/</id>
    <published>2018-12-15T07:02:54.000Z</published>
    <updated>2018-12-15T07:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文档<a href="https://juejin.im/post/5ab3f77df265da2392364341" target="_blank" rel="noopener">npm install</a></p><h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><ul><li><p>npm init 执行默认行为<br>免去npm init 之后一直按 enter，在命令后追加 –yes 参数即可，其作用与一路下一步相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure></li><li><p>自定义 npm init 行为<br>npm init 命令的原理并不复杂，调用脚本，输出一个初始化的 package.json 文件就是了。所以相应地，定制 npm init 命令的实现方式也很简单，在 Home 目录创建一个 .npm-init.js 即可，该文件的 module.exports 即为 package.json 配置内容，需要获取用户输入时候，使用 prompt() 方法即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const desc = prompt(&apos;description?&apos;, &apos;A new package...&apos;)</span><br><span class="line">const bar = prompt(&apos;bar?&apos;, &apos;&apos;)</span><br><span class="line">const count = prompt(&apos;count?&apos;, &apos;42&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  key: &apos;value&apos;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: bar,</span><br><span class="line">    count: count</span><br><span class="line">  &#125;,</span><br><span class="line">  name: prompt(&apos;name?&apos;, process.cwd().split(&apos;/&apos;).pop()),</span><br><span class="line">  version: prompt(&apos;version?&apos;, &apos;0.1.0&apos;),</span><br><span class="line">  description: desc,</span><br><span class="line">  main: &apos;index.js&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时在 ~/hello 目录下执行 npm init 将会得到这样的 package.json:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;value&quot;,</span><br><span class="line">&quot;foo&quot;: &#123;</span><br><span class="line">    &quot;bar&quot;: &quot;&quot;,</span><br><span class="line">    &quot;count&quot;: &quot;42&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;name&quot;: &quot;hello&quot;,</span><br><span class="line">&quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">&quot;description&quot;: &quot;A new package...&quot;,</span><br><span class="line">&quot;main&quot;: &quot;index.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h2><ul><li>package定义</li></ul><p>手动安装一个包时，执行 <code>npm install &lt;package&gt;</code> 命令即可。这里的第三个参数 package 通常就是我们所要安装的包名，默认配置下 npm 会从默认的源 (Registry) 中查找该包名对应的包地址，并下载安装。但在 npm 的世界里，除了简单的指定包名, package 还可以是一个指向有效包名的 http url/git url/文件夹路径。</p><p>根据<a href="https://docs.npmjs.com/about-packages-and-modules" target="_blank" rel="noopener">npm文档</a>，只要符合以下其中之一条件，就是一个 package:<br><img src="../../../../images/npm1.png" alt="package包定义">   </p><ul><li>npm5</li></ul><ol><li>npm5增加了 package-lock.json 文件，package-lock.json 的作用是锁定依赖安装结构，如果查看这个 json 的结构，会发现与 node_modules 目录的文件层级结构是一一对应的。       </li><li>version, resolved, integrity 用来记录包的准确版本号、内容hash、安装源的，决定了要安装的包的准确“身份”信息。假设盖住其他字段，只关注文件中的 dependencies: {} 我们会发现，整个文件的 JSON 配置里的 dependencies 层次结构与文件系统中 node_modules 的文件夹层次结构是完全对照的。  </li><li>只关注 requires: {} 字段又会发现，除最外层的 requires 属性为 true 以外, 其他层的 requires 属性都对应着这个包的 package.json 里记录的自己的依赖项。  </li><li>因为这个文件记录了 node_modules 里所有包的结构、层级和版本号甚至安装源，它也就事实上提供了 “保存” node_modules 状态的能力。只要有这样一个 lock 文件，不管在那一台机器上执行 npm install 都会得到完全相同的 node_modules 结果。  </li><li>这就是 package-lock 文件致力于优化的场景：在从前仅仅用 package.json 记录依赖，由于 semver range 的机制；一个月前由 A 生成的 package.json 文件，B 在一个月后根据它执行 npm install 所得到的 node_modules 结果很可能许多包都存在不同的差异，虽然 semver 机制的限制使得同一份 package.json 不会得到大版本不同的依赖包，但同一份代码在不同环境安装出不同的依赖包，依然是可能导致意外的潜在因素。</li></ol><p>禁用package-lock.json：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set package-lock false</span><br></pre></td></tr></table></figure></p><h2 id="依赖包版本管理"><a href="#依赖包版本管理" class="headerlink" title="依赖包版本管理"></a>依赖包版本管理</h2><p>见 npm依赖包版本管理文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考文档&lt;a href=&quot;https://juejin.im/post/5ab3f77df265da2392364341&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm install&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;npm-init&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="前端" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="https://qiuyuxiu.github.io/MyBlog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>export与export default</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/12/15/export%E4%B8%8Eexport-default/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/12/15/export与export-default/</id>
    <published>2018-12-15T05:43:43.000Z</published>
    <updated>2018-12-15T05:57:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、export与export default均可用于导出常量、函数、文件、模块等<br>2、你可以在其它文件或模块中通过import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用<br>3、在一个文件或模块中，export、import可以有多个，export default仅有一个<br>4、通过export方式导出，在导入时要加{ }，export default则不需要<br>这样来说其实很多时候export与export default可以实现同样的目的，只是用法有些区别。注意第四条，通过export方式导出，在导入时要加{ }，export default则不需要。使用export default命令，为模块指定默认输出，这样就不需要知道所要加载模块的变量名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"李四"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;</span><br><span class="line"><span class="comment">//import &#123; name &#125; from "/.a.js" </span></span><br><span class="line">可以写成：</span><br><span class="line"><span class="keyword">var</span> name=<span class="string">"李四"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name</span><br><span class="line"><span class="comment">//import name from "/.a.js" 这里name不需要大括号</span></span><br></pre></td></tr></table></figure><p>在一个文件或模块中，export、import可以有多个，export default仅有一个。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name1=<span class="string">"李四"</span>;</span><br><span class="line"><span class="keyword">var</span> name2=<span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name1 ,name2 &#125;</span><br></pre></td></tr></table></figure></p><p>也可以写成如下，也是可以的，import跟他类似。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name1=<span class="string">"李四"</span>;</span><br><span class="line"><span class="keyword">var</span> name2=<span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">export</span> name1;</span><br><span class="line"><span class="keyword">export</span> name2;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、export与export default均可用于导出常量、函数、文件、模块等&lt;br&gt;2、你可以在其它文件或模块中通过import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用&lt;br&gt;3、在一个文件或模块中，export、import可
      
    
    </summary>
    
      <category term="前端" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="export与import" scheme="https://qiuyuxiu.github.io/MyBlog/tags/export%E4%B8%8Eimport/"/>
    
  </entry>
  
  <entry>
    <title>React Native环境搭建实践</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/10/30/React%20Native%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/10/30/React Native环境搭建实践/</id>
    <published>2018-10-30T07:38:36.000Z</published>
    <updated>2018-10-30T08:14:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>该文是对android端的介绍，需要了解ios的请移步到<a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">React Native中文版</a></p><h2 id="安装依赖Node、Watchman"><a href="#安装依赖Node、Watchman" class="headerlink" title="安装依赖Node、Watchman"></a>安装依赖Node、Watchman</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install watchman</span><br></pre></td></tr></table></figure><p>如果已经安装过node，保证node版本在v8.3以上即可，可使用nvm进行node管理。</p><h2 id="设置安装源为淘宝镜像"><a href="#设置安装源为淘宝镜像" class="headerlink" title="设置安装源为淘宝镜像"></a>设置安装源为淘宝镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm config set disturl https://npm.taobao.org/dist</span><br></pre></td></tr></table></figure><p>如果之前设置过源，那么按照官网文档使用–global的话就没有起作用，使用<code>npm config list</code>可以看到userconfig和globalconfig不一致，而安装使用的是userconfig的源，所以直接使用上面的命令就会把userconfig替换掉，这样对之后的安装用的也是userconfig的源，如果之后需要换其他的源，也是这样替换掉即可。  </p><h2 id="安装依赖yarn"><a href="#安装依赖yarn" class="headerlink" title="安装依赖yarn"></a>安装依赖yarn</h2><p>Yarn是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure></p><p>安装完 yarn 后同理也要设置镜像源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br><span class="line">yarn config set disturl https://npm.taobao.org/dist</span><br></pre></td></tr></table></figure></p><p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用yarn代替npm install命令，用yarn add 某第三方库名代替npm install 某第三方库名。  </p><h2 id="安装和配置Android-studio"><a href="#安装和配置Android-studio" class="headerlink" title="安装和配置Android studio"></a>安装和配置Android studio</h2><p>可以参考<a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">React Native中文版</a>中安装和配置。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure><h2 id="编译与运行"><a href="#编译与运行" class="headerlink" title="编译与运行"></a>编译与运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd AwesomeProject</span><br><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><h2 id="运用TypeScript"><a href="#运用TypeScript" class="headerlink" title="运用TypeScript"></a>运用TypeScript</h2><p><a href="https://www.tslang.cn/samples/index.html" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/Microsoft/TypeScript-React-Native-Starter#typescript-react-native-starter" target="_blank" rel="noopener">文档</a>  </p><ul><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev typescript</span><br><span class="line">yarn add --dev react-native-typescript-transformer</span><br><span class="line">yarn tsc --init --pretty --jsx react</span><br><span class="line">touch rn-cli.config.js</span><br><span class="line">yarn add --dev @types/react @types/react-native</span><br></pre></td></tr></table></figure></li><li><p>编辑rn-cli.config.js,填入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  getTransformModulePath() &#123;</span><br><span class="line">    return require.resolve(&quot;react-native-typescript-transformer&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  getSourceExts() &#123;</span><br><span class="line">    return [&quot;ts&quot;, &quot;tsx&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>将App.js文件重命名为App.tsx，index.js不用修改后缀名，其他的都需要修改为tsx或者ts(如果没有jsx语句为ts)。</p></li><li><p>修改引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">+import React from &apos;react&apos;</span><br><span class="line">+import &#123; Component &#125; from &apos;react&apos;;</span><br></pre></td></tr></table></figure></li><li><p>安装 Jest依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev ts-jest</span><br></pre></td></tr></table></figure></li><li><p>修改package.json文件中的jest</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">  "preset": "react-native",</span><br><span class="line">  "moduleFileExtensions": [</span><br><span class="line">    "ts",</span><br><span class="line">    "tsx",</span><br><span class="line">    <span class="string">"js"</span></span><br><span class="line">  ],</span><br><span class="line">  "transform": &#123;</span><br><span class="line">    "^.+\\.(js)$": "&lt;rootDir&gt;/node_modules/babel-jest",</span><br><span class="line">    "\\.(ts|tsx)$": "&lt;rootDir&gt;/node_modules/ts-jest/preprocessor.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",</span><br><span class="line">  "testPathIgnorePatterns": [</span><br><span class="line">    "\\.snap$",</span><br><span class="line">    <span class="string">"&lt;rootDir&gt;/node_modules/"</span></span><br><span class="line">  ],</span><br><span class="line">  "cacheDirectory": ".jest/cache"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑gitignore文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Jest</span><br><span class="line">#</span><br><span class="line">.jest/</span><br></pre></td></tr></table></figure></li><li><p>重新运行即可</p></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>如果遇到提示找不到Androidsdk的log，则可以在android文件夹创建一个local.properties文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk.dir=sdk的路径</span><br></pre></td></tr></table></figure></li><li><p>Mac中真机测试React Native project时出现Unable to load script from assets ‘index.android.bundle’<br>第一步：首先切到我们工程的根目录下，然后在android/app/src/main目录下新建一个assets文件夹，可以在终端中执行以下命令建立：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir android/app/src/main/assets</span><br></pre></td></tr></table></figure></li></ul><p>第二步：在根目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res</span><br></pre></td></tr></table></figure></p><p>第三步：重新运行以下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure></p><ul><li>React Native连接设备报错could not connect to development server<br>如果手机和电脑使用的是同一个wifi，则摇晃手机点击Dev Settings，找到Debug server host &amp; port for devide，设置电脑的wifi的ip地址，注意还要加上程序运行的端口8081（默认）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文是对android端的介绍，需要了解ios的请移步到&lt;a href=&quot;https://reactnative.cn/docs/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Native中文版&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="React Native" scheme="https://qiuyuxiu.github.io/MyBlog/categories/React-Native/"/>
    
    
      <category term="搭建环境" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
      <category term="React" scheme="https://qiuyuxiu.github.io/MyBlog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript学习</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/10/18/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/10/18/TypeScript学习/</id>
    <published>2018-10-18T11:58:31.000Z</published>
    <updated>2018-10-18T12:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a href="http://www.typescriptlang.org/docs/handbook/functions.html" target="_blank" rel="noopener">更多函数说明</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加类型：申明参数x和y为number类型，返回值为number。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写函数类型</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y = 10</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>以下是 TypeScript 中的几种基础类型：</p><ul><li>boolean为布尔值类型，如let isDone: Boolean = false</li><li>number为数值类型，如let decimal: number = 6;</li><li>string为字符串类型，如let color: string = ‘blue’</li><li>数组类型，如let list: number[] = [ 1, 2, 3 ]</li><li>元组类型，如let x: [ string, number ] = [ “hello”, 10 ]</li><li>枚举类型，如enum Color { Red, Green, Blue }; let c: Color = Color.Green</li><li>any为任意类型，如let notSure: any = 4; notSure = “maybe a string instead”</li><li>void为空类型，如let unusable: void = undefined</li><li>null和undefined</li><li>never表示没有值的类型，如function error(message: string): never { throw new Error(message); }</li><li>多种类型可以用|隔开，比如number | string表示可以是number或string类型</li></ul><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><p><a href="http://www.typescriptlang.org/docs/handbook/interfaces.html" target="_blank" rel="noopener">更多interface定义方式</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> data &#123;</span><br><span class="line">  width?: <span class="built_in">number</span>; <span class="comment">// 加了问号表示该参数为可选属性，可设置也可以不设置。</span></span><br><span class="line">  text: <span class="built_in">string</span>; <span class="comment">// 数据类型为number，必填属性。</span></span><br><span class="line">  readonly isReading: <span class="built_in">boolean</span>; <span class="comment">// 该属性为只读属性。</span></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 表示允许 obj[xxx] 这样的动态属性。</span></span><br><span class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>; <span class="comment">// 函数接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/functions.html&quot; t
      
    
    </summary>
    
      <category term="TypeScript" scheme="https://qiuyuxiu.github.io/MyBlog/categories/TypeScript/"/>
    
    
      <category term="TypeScript" scheme="https://qiuyuxiu.github.io/MyBlog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>安卓必学几点</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/08/17/%E5%AE%89%E5%8D%93%E5%BF%85%E5%AD%A6%E5%87%A0%E7%82%B9/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/08/17/安卓必学几点/</id>
    <published>2018-08-17T03:06:15.000Z</published>
    <updated>2018-08-17T03:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h4><ul><li>activity 生命周期（需熟悉，234可后期学）</li><li>BroadcastReceive广播接收器:</li><li>Service 服务:</li><li>content provider </li></ul><h4 id="Android五大布局-前三个常用需熟悉，-后两个需了解"><a href="#Android五大布局-前三个常用需熟悉，-后两个需了解" class="headerlink" title="Android五大布局  前三个常用需熟悉， 后两个需了解"></a>Android五大布局  前三个常用需熟悉， 后两个需了解</h4><ul><li>LinearLayout(线性布局)</li><li>RelativeLayout(相对布局)</li><li>FrameLayout(框架布局)</li><li>AbsoluteLayout(绝对布局)</li><li>TableLayout(表格布局)</li></ul><h4 id="常用控件（需熟悉）"><a href="#常用控件（需熟悉）" class="headerlink" title="常用控件（需熟悉）"></a>常用控件（需熟悉）</h4><ul><li>ImageView</li><li>TextView</li><li>CheckBox</li><li>Button </li><li>ProgressBar</li><li>EditText</li><li>RadioButton与RadioGroup</li><li>RecyleView（列表）</li></ul><h4 id="选择器selector-xml的属性"><a href="#选择器selector-xml的属性" class="headerlink" title="选择器selector.xml的属性"></a>选择器selector.xml的属性</h4><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>ValueAnimation<br><a href="http://www.runoob.com/w3cnote/android-tutorial-valueanimator.html" target="_blank" rel="noopener">动画新手教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;四大组件&quot;&gt;&lt;a href=&quot;#四大组件&quot; class=&quot;headerlink&quot; title=&quot;四大组件&quot;&gt;&lt;/a&gt;四大组件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;activity 生命周期（需熟悉，234可后期学）&lt;/li&gt;
&lt;li&gt;BroadcastReceive广播接收
      
    
    </summary>
    
      <category term="安卓" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="安卓" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>http三个版本</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/http%E4%B8%89%E4%B8%AA%E7%89%88%E6%9C%AC/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/http三个版本/</id>
    <published>2018-06-08T08:52:34.000Z</published>
    <updated>2018-06-09T15:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP1-0-amp-HTTP1-1"><a href="#HTTP1-0-amp-HTTP1-1" class="headerlink" title="HTTP1.0 &amp; HTTP1.1"></a>HTTP1.0 &amp; HTTP1.1</h2><p>1.长连接<br>HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接,参数为keep-alive。<br>HTTP是基于TCP/IP协议的，创建一个TCP连接是需要经过三次握手的,有一定的开销，如果每次通讯都要重新建立连接的话，对性能有影响。因此最好能维持一个长连接，可以用个长连接来发多个请求。</p><p>2.节约带宽<br>HTTP 1.1支持只发送header信息(不带任何body信息)，如果服务器认为客户端有权限请求服务器，则返回100，否则返回401(无权限)。客户端如果接受到100，才开始把请求body发送到服务器。<br>这样当服务器返回401的时候，客户端就可以不用发送请求body了，节约了带宽。<br>另外HTTP还支持传送内容的一部分,这样当客户端已经有一部分的资源后，只需要跟服务器请求另外的部分资源即可,这是支持文件断点续传的基础。</p><p>3.HOST域<br>HTTP1.0是没有host域的，HTTP1.1才支持这个参数。</p><h2 id="HTTP1-1-HTTP-2-0主要区别"><a href="#HTTP1-1-HTTP-2-0主要区别" class="headerlink" title="HTTP1.1 HTTP 2.0主要区别"></a>HTTP1.1 HTTP 2.0主要区别</h2><p>1.多路复用<br>多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。<br>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。<br>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。<br>TCP连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求</p><p>2.数据压缩<br>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p><p>3.服务器推送<br>当我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。<br>服务器端推送的这些资源其实存在客户端的某处地方，客户端直接从本地加载这些资源就可以了，不用走网络，速度自然是快很多的。</p><p>4.加载速度很快</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP1-0-amp-HTTP1-1&quot;&gt;&lt;a href=&quot;#HTTP1-0-amp-HTTP1-1&quot; class=&quot;headerlink&quot; title=&quot;HTTP1.0 &amp;amp; HTTP1.1&quot;&gt;&lt;/a&gt;HTTP1.0 &amp;amp; HTTP1.1&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="HTTP" scheme="https://qiuyuxiu.github.io/MyBlog/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://qiuyuxiu.github.io/MyBlog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>长连接&amp;短连接&amp;长轮询&amp;短轮询</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/06/08/%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E8%BF%9E%E6%8E%A5-%E9%95%BF%E8%BD%AE%E8%AF%A2-%E7%9F%AD%E8%BD%AE%E8%AF%A2/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/06/08/长连接-短连接-长轮询-短轮询/</id>
    <published>2018-06-08T08:52:19.000Z</published>
    <updated>2018-06-09T15:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="长连接、短连接"><a href="#长连接、短连接" class="headerlink" title="长连接、短连接"></a>长连接、短连接</h2><p>在HTTP/1.0中默认使用短连接。客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。<br>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：<br><code>Connection:keep-alive</code><br>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。<br>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><h2 id="长连接和短连接的优点和缺点"><a href="#长连接和短连接的优点和缺点" class="headerlink" title="长连接和短连接的优点和缺点"></a>长连接和短连接的优点和缺点</h2><p>由上可以看出，长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。对于频繁请求资源的客户端适合使用长连接。在长连接的应用场景下，client端一般不会主动关闭连接，当client与server之间的连接一直不关闭，随着客户端连接越来越多，server会保持过多连接。这时候server端需要采取一些策略，如关闭一些长时间没有请求发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件允许则可以限制每个客户端的最大长连接数，这样可以完全避免恶意的客户端拖垮整体后端服务。<br>短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但如果客户请求频繁，将在TCP的建立和关闭操作上浪费较多时间和带宽。<br>长连接和短连接的产生在于client和server采取的关闭策略。不同的应用场景适合采用不同的策略。</p><h2 id="长轮询、短轮询"><a href="#长轮询、短轮询" class="headerlink" title="长轮询、短轮询"></a>长轮询、短轮询</h2><p>在长轮询机制中，客户端像传统轮询一样从服务器请求数据。然而，如果服务器没有可以立即返回给客户端的数据，则不会立刻返回一个空结果，而是保持这个请求等待数据到来（或者恰当的超时），之后将数据作为结果返回给客户端。<br>很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。<br>轮询：客户端定时向服务器发送ajax请求，服务器接到请求后马上返回响应信息并关闭连接。<br>优点：后端程序编写比较容易。<br>缺点：请求中有大半是无用，浪费带宽和服务器资源。<br>实例：适于小型应用。<br>长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。<br>优点：在无消息的情况下不会频繁的请求。<br>缺点：服务器hold连接会消耗资源。<br>实例：WebQQ、Hi网页版、Facebook IM。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;长连接、短连接&quot;&gt;&lt;a href=&quot;#长连接、短连接&quot; class=&quot;headerlink&quot; title=&quot;长连接、短连接&quot;&gt;&lt;/a&gt;长连接、短连接&lt;/h2&gt;&lt;p&gt;在HTTP/1.0中默认使用短连接。客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就
      
    
    </summary>
    
      <category term="长连接&amp;短连接&amp;长轮询&amp;短轮询" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E8%BF%9E%E6%8E%A5-%E9%95%BF%E8%BD%AE%E8%AF%A2-%E7%9F%AD%E8%BD%AE%E8%AF%A2/"/>
    
    
      <category term="长连接&amp;短连接&amp;长轮询&amp;短轮询" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E8%BF%9E%E6%8E%A5-%E9%95%BF%E8%BD%AE%E8%AF%A2-%E7%9F%AD%E8%BD%AE%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>JSONP</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/05/08/JSONP/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/05/08/JSONP/</id>
    <published>2018-05-08T08:52:46.000Z</published>
    <updated>2018-06-09T15:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>手写Jsonp，Jsonp是跨域请求的一种常用的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(function (window,document) &#123;</span><br><span class="line">  &apos;use strict&apos;;</span><br><span class="line">  var jsonp = function(url,data,callback)&#123;</span><br><span class="line">    //1 挂载回调函数</span><br><span class="line">    var fnSuffix = Math.random().toString().replace(&apos;.&apos;,&apos;&apos;);</span><br><span class="line">    var cbFuncName = &apos;my_json_cd_&apos; + fnSuffix;</span><br><span class="line">    //将函数挂载在全局环境的方式不推荐  使用cbs.my_json_cb_</span><br><span class="line">    window[cbFuncName] = callback;</span><br><span class="line">    //2 将data转化成url字符串的形式</span><br><span class="line">    var querystring = url.indexOf(&apos;?&apos;)==-1?&apos;?&apos;:&apos;&amp;&apos;;</span><br><span class="line">    for(var key in data)&#123;</span><br><span class="line">      querystring += key + &apos;=&apos; +data[key]+&apos;&amp;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    //3 处理url地址中的回调参数</span><br><span class="line">    querystring += &apos;callback=&apos; + cbFuncName;</span><br><span class="line">    //4 创建一个script的标签</span><br><span class="line">    var scriptElement = document.createElement(&apos;script&apos;);</span><br><span class="line">    scriptElement.src = url + querystring;</span><br><span class="line">    //5 将script标签放到页面中</span><br><span class="line">    document.body.appendChild(scriptElement);</span><br><span class="line">  &#125;;</span><br><span class="line">  window.$jsonp = jsonp;</span><br><span class="line">&#125;)(window,document);</span><br><span class="line">//实现</span><br><span class="line">// (function()&#123;</span><br><span class="line">//   $jsonp(//地址</span><br><span class="line">//     &apos;http://api.douban.com/v2/movie/in_theaters&apos;,</span><br><span class="line">//     //传递的参数</span><br><span class="line">//     &#123;</span><br><span class="line">//       count:10,start:5</span><br><span class="line">//     &#125;,</span><br><span class="line">//     //回调函数</span><br><span class="line">//     function(data)&#123;</span><br><span class="line">//       document.getElementById(&apos;result&apos;).innerHTML=JSON.stringify(data);</span><br><span class="line">//     &#125;</span><br><span class="line">//   );</span><br><span class="line">// &#125;)();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;手写Jsonp，Jsonp是跨域请求的一种常用的方式。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
      <category term="JSONP" scheme="https://qiuyuxiu.github.io/MyBlog/categories/JSONP/"/>
    
    
      <category term="JSONP" scheme="https://qiuyuxiu.github.io/MyBlog/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>手写promise</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/03/21/%E6%89%8B%E5%86%99promise/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/03/21/手写promise/</id>
    <published>2018-03-21T08:52:57.000Z</published>
    <updated>2018-06-09T15:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>promise规范在前端中非常重要，特别是异步请求的时候。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">function Defer(executor)&#123;</span><br><span class="line">    if(!(this instanceof Defer))&#123;</span><br><span class="line">        throw &apos;Defer is a constructor and should be called width &quot;new&quot; keyword&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(typeof executor !== &apos;function&apos;)&#123;</span><br><span class="line">        throw &apos;Defer params must be a function&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    this.thenCache = [];//&#123;resolve:,reject:&#125;</span><br><span class="line">    this.errorHandle = null;</span><br><span class="line">    this.status = &apos;pendding&apos;;</span><br><span class="line">    this.value = null;</span><br><span class="line">    this.rejectReason = null;</span><br><span class="line">    var self = this;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            executor.call(self, self.resolve.bind(self), self.reject.bind(self));//传递resolve，reject方法</span><br><span class="line">        &#125;catch(e)&#123;</span><br><span class="line">            self.reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,0);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">Defer.prototype.resolve = function(value)&#123;</span><br><span class="line">    this.status = &apos;resolved&apos;;</span><br><span class="line">    this.value = value;</span><br><span class="line">    this.triggerThen();</span><br><span class="line">&#125;;</span><br><span class="line">Defer.prototype.reject = function(reason)&#123;</span><br><span class="line">    this.status = &apos;rejected&apos;;</span><br><span class="line">    this.rejectReason = reason;</span><br><span class="line">    this.triggerThen();</span><br><span class="line">&#125;;</span><br><span class="line">Defer.prototype.then = function(resolve,reject)&#123;</span><br><span class="line">    var todo = &#123;resolve:resolve,reject:reject&#125;;</span><br><span class="line">    this.thenCache.push(todo);</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">Defer.prototype.triggerThen = function()&#123;</span><br><span class="line">    var current = this.thenCache.shift();</span><br><span class="line">    var res = null;</span><br><span class="line">    if(!current &amp;&amp; this.status === &apos;resolved&apos;)&#123;//成功解析并读取完then cache</span><br><span class="line">        return this;</span><br><span class="line">    &#125;else if(!current &amp;&amp; this.status === &apos;rejected&apos;)&#123;//解析失败并读取完then cache，直接调用errorHandle</span><br><span class="line">        if(this.errorHandle)&#123;</span><br><span class="line">            this.value = this.errorHandle.call(undefined, this.rejectReason);</span><br><span class="line">            this.status= &apos;resolved&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;;</span><br><span class="line">    if(this.status === &apos;resolved&apos;)&#123;</span><br><span class="line">        res = current.resolve;</span><br><span class="line">    &#125;else if(this.status === &apos;rejected&apos;)&#123;</span><br><span class="line">        res = current.reject;</span><br><span class="line">    &#125;</span><br><span class="line">    if(typeof res === &apos;function&apos;)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            this.value = res.call(undefined, this.value || this.rejectReason);//重置promise的value</span><br><span class="line">            this.status = &apos;resolved&apos;;</span><br><span class="line">            this.triggerThen();//继续执行then链</span><br><span class="line">        &#125;catch(e)&#123;</span><br><span class="line">            this.status = &apos;rejected&apos;;//异常，则promise为reject</span><br><span class="line">            this.rejectReason = e;</span><br><span class="line">            return this.triggerThen();//触发then链</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;//不是函数则忽略</span><br><span class="line">        this.triggerThen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Defer.prototype.catch = function(fn)&#123;</span><br><span class="line">    if(typeof fn === &apos;function&apos;)&#123;</span><br><span class="line">        this.errorHandle = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">function test() &#123;</span><br><span class="line">    debugger;</span><br><span class="line">    return new Defer(function(res,rej)&#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            res(1);</span><br><span class="line">        &#125;,1000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">test().then(function(value)&#123;</span><br><span class="line">    console.log(&apos;resolve then 1&apos;,value);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;).then(function (value) &#123;</span><br><span class="line">    console.log(&apos;resolve then 2&apos;,value);</span><br><span class="line">    throw 2;</span><br><span class="line">&#125;).catch(function (e) &#123;</span><br><span class="line">    console.log(&apos;error&apos;,e);</span><br><span class="line">&#125;);</span><br><span class="line">function test2()&#123;</span><br><span class="line">    return new Defer(function(res,rej)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            rej(1);</span><br><span class="line">        &#125;,1000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">test2().then(null, function(value)&#123;</span><br><span class="line">    console.log(&apos;reject then 1&apos;, value);</span><br><span class="line">    throw &apos;error 1&apos;</span><br><span class="line">&#125;).then(null, function(value)&#123;</span><br><span class="line">    console.log(&apos;reject then 2&apos;, value);</span><br><span class="line">    throw &apos;error 2&apos;;</span><br><span class="line">&#125;).catch(function(e)&#123;</span><br><span class="line">    console.log(&apos;error&apos;,e);</span><br><span class="line">&#125;);</span><br><span class="line">//结果:</span><br><span class="line">//reject then 1 1</span><br><span class="line">//reject then 2 error 2</span><br><span class="line">//error erro 2</span><br><span class="line">test2().then(null, function(value)&#123;</span><br><span class="line">    console.log(&apos;reject then 1&apos;, value);</span><br><span class="line">    throw &apos;throw error from then 1&apos;;</span><br><span class="line">&#125;).then(function(value)&#123;</span><br><span class="line">    console.log(&apos;resolve then 2&apos;, value);</span><br><span class="line">&#125;).catch(function(e)&#123;</span><br><span class="line">    console.log(&apos;error&apos;,e);</span><br><span class="line">&#125;);</span><br><span class="line">//结果:</span><br><span class="line">//reject then 1 1</span><br><span class="line">//error throw error from then 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;promise规范在前端中非常重要，特别是异步请求的时候。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="promise" scheme="https://qiuyuxiu.github.io/MyBlog/categories/promise/"/>
    
    
      <category term="promise" scheme="https://qiuyuxiu.github.io/MyBlog/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏问题</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/03/01/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/03/01/内存泄漏问题/</id>
    <published>2018-03-01T08:53:07.000Z</published>
    <updated>2018-06-09T15:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>借鉴于：<br><a href="http://www.cnblogs.com/chuaWeb/p/5196330.html" target="_blank" rel="noopener">前端内存泄漏探讨</a><br><a href="https://www.jb51.net/article/75292.htm" target="_blank" rel="noopener">垃圾回收机制与内存管理</a></p><ol><li>在 IE7、IE8 中，如果循环引用中的任何对象是 DOM 节点或者 ActiveX 对象，比如var a = document.getElementById(“#a”)，垃圾收集系统则不会发现它们之间的循环关系,因为IE的DOM回收机制和JS回收机制不是同一个。js回收机制分两种：标记清除和引用计数，引用计数对循环引用的垃圾回收会出现内存泄漏，而IE的DOM回收机制便是采用引用计数的。IE9+并不存在循环引用导致Dom内存泄露问题，可能是微软做了优化，或者Dom的回收方式已经改变。</li><li>标记清除:<br>js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</li><li>引用计数<br>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</li><li>垃圾回收机制—GC<br>Javascript具有自动垃圾回收机制(GC:Garbage Collecation)，也就是说，执行环境会负责管理代码执行过程中使用的内存。<br>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。<br>JavaScript垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</li><li>内存泄露的形式：<br>循环引用（Circular References） - 当 IE 浏览器的 COM 组件与脚本引擎对象之间相互引用时，将导致内存泄露，这是最常见的形式。<br>闭包（Closures） - 闭包是循环引用的特殊形式，也是目前 Web 架构中使用最多的一种语言特性。闭包很容易被发现，因为它们依赖于特定的语言关键字，可以通过简单的搜索来查找。<br>页面交叉泄露（Cross-Page Leaks） - 页面交叉泄漏其实是一种较小的泄漏，它通常在你浏览过程中，由于内部对象 book-keeping 引起。我们将讨论 DOM 插入顺序问题，在示例中你将发现只需要微小的改动就可以避免 book-keeping 对象的产生。<br>伪泄露（Pseudo-Leaks） — 严格来说并不算真正的内存泄露，不过如果你不了解它，你将会在可用内存越来越少时非常懊恼。为了演示这个问题，我们将通过重写 script 元素中的内容来引发大量内存的“泄漏”。</li><li>es6中weakSet，weakMap可以解决内存泄露问题，弱引用。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;借鉴于：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chuaWeb/p/5196330.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端内存泄漏探讨&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jb51.
      
    
    </summary>
    
      <category term="内存泄漏" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
    
      <category term="内存泄漏" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>jQuery多种插件使用说明</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/02/03/jQuery%E5%A4%9A%E7%A7%8D%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/02/03/jQuery多种插件使用说明/</id>
    <published>2018-02-03T04:17:55.000Z</published>
    <updated>2018-06-09T15:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日历插件"><a href="#日历插件" class="headerlink" title="日历插件"></a>日历插件</h2><p>1.<a href="http://www.my97.net/" target="_blank" rel="noopener">WdatePicker.js</a><br>下载WdatePicker插件：<a href="http://www.my97.net/" target="_blank" rel="noopener">点击下载</a><br>使用说明：<br>引入js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;WdatePicker.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>常规：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;d11&quot; type=&quot;text&quot; onClick=&quot;WdatePicker()&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>图标触发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;d12&quot; type=&quot;text&quot;/&gt;</span><br><span class="line">&lt;img onclick=&quot;WdatePicker(&#123;el:&apos;d12&apos;&#125;)&quot; src=&quot;../skin/datePicker.gif&quot; width=&quot;16&quot; height=&quot;22&quot; align=&quot;absmiddle&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>注意:只需要传入控件的id即可</p><p>文档见<a href="http://www.my97.net/dp/demo/index.htm" target="_blank" rel="noopener">WdatePicker文档</a></p><h2 id="全屏滚动插件"><a href="#全屏滚动插件" class="headerlink" title="全屏滚动插件"></a>全屏滚动插件</h2><p>1.<a href="http://www.dowebok.com/77.html" target="_blank" rel="noopener">fullPage.js</a><br>下载fullPage插件：<a href="http://www.dowebok.com/77.html" target="_blank" rel="noopener">点击下载</a><br>使用说明：<br>引入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.fullPage.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 --&gt;</span><br><span class="line">&lt;script src=&quot;js/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;</span><br><span class="line">&lt;script src=&quot;js/jquery.slimscroll.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;js/jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">        &lt;h3&gt;第一屏&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">        &lt;h3&gt;第二屏&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">        &lt;h3&gt;第三屏&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">        &lt;h3&gt;第四屏&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 <code>section</code> 加上 <code>class=”active”</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;section active&quot;&gt;第三屏&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>同时，可以在 section 内加入 slide，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;第一屏&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;第二屏&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;slide&quot;&gt;第三屏的第一屏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;slide&quot;&gt;第三屏的第二屏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;slide&quot;&gt;第三屏的第三屏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;slide&quot;&gt;第三屏的第四屏&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;第四屏&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>JavaScript:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    $(&apos;#dowebok&apos;).fullpage();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>详细展示说明见<a href="http://www.dowebok.com/demo/2014/77/" target="_blank" rel="noopener">文档</a></p><h2 id="滚动条插件"><a href="#滚动条插件" class="headerlink" title="滚动条插件"></a>滚动条插件</h2><p>1.<a href="http://jscrollpane.kelvinluck.com/index.html#examples" target="_blank" rel="noopener">jScrollPane.js</a><br>下载jScrollPane.js插件：<a href="http://jscrollpane.kelvinluck.com/index.html#examples" target="_blank" rel="noopener">点击下载</a><br>使用说明<br>引入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- styles needed by jScrollPane --&gt;</span><br><span class="line">&lt;link type=&quot;text/css&quot; href=&quot;style/jquery.jscrollpane.css&quot; rel=&quot;stylesheet&quot; media=&quot;all&quot; /&gt;</span><br><span class="line">&lt;!-- latest jQuery direct from google&apos;s CDN --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- the mousewheel plugin - optional to provide mousewheel support --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery.mousewheel.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- the jScrollPane script --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery.jscrollpane.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>调用接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">$(&apos;.scroll-pane&apos;).jScrollPane();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>其他的一些属性改变见：<a href="http://www.jq22.com/jquery-info14307" target="_blank" rel="noopener">文档</a></p><p>监听函数使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">$(&apos;.scroll-pane&apos;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-initialised&apos;,</span><br><span class="line">function(event, isScrollable)&#123;</span><br><span class="line">console.log(&apos;Handle jsp-initialised&apos;, this,</span><br><span class="line">&apos;isScrollable=&apos;, isScrollable);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-will-scroll-x&apos;,</span><br><span class="line">function(event, destX)&#123;</span><br><span class="line">console.log(</span><br><span class="line">&apos;Handle jsp-will-scroll-x&apos;, this,</span><br><span class="line">&apos;destX=&apos;, destX</span><br><span class="line">);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-will-scroll-y&apos;,</span><br><span class="line">function(event, destY)&#123;</span><br><span class="line">console.log(</span><br><span class="line">&apos;Handle jsp-will-scroll-y&apos;, this,</span><br><span class="line">&apos;destY=&apos;, destY</span><br><span class="line">);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-scroll-y&apos;,</span><br><span class="line">function(event, scrollPositionY, isAtTop, isAtBottom)&#123;</span><br><span class="line">console.log(&apos;Handle jsp-scroll-y&apos;, this,</span><br><span class="line">&apos;scrollPositionY=&apos;, scrollPositionY,</span><br><span class="line">&apos;isAtTop=&apos;, isAtTop,</span><br><span class="line">&apos;isAtBottom=&apos;, isAtBottom);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-scroll-x&apos;,</span><br><span class="line">function(event, scrollPositionX, isAtLeft, isAtRight)&#123;</span><br><span class="line">console.log(&apos;Handle jsp-scroll-x&apos;, this,</span><br><span class="line">&apos;scrollPositionX=&apos;, scrollPositionX,</span><br><span class="line">&apos;isAtLeft=&apos;, isAtLeft,</span><br><span class="line">&apos;isAtRight=&apos;, isAtRight);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-arrow-change&apos;,</span><br><span class="line">function(event, isAtTop, isAtBottom, isAtLeft, isAtRight)</span><br><span class="line">&#123;</span><br><span class="line">console.log(&apos;Handle jsp-arrow-change&apos;, this,</span><br><span class="line">&apos;isAtTop=&apos;, isAtTop,</span><br><span class="line">&apos;isAtBottom=&apos;, isAtBottom,</span><br><span class="line">&apos;isAtLeft=&apos;, isAtLeft,</span><br><span class="line">&apos;isAtRight=&apos;, isAtRight);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-user-scroll-y&apos;,</span><br><span class="line">function(event, destTop, isAtTop, isAtBottom)</span><br><span class="line">&#123;</span><br><span class="line">console.log(</span><br><span class="line">&apos;Handle jsp-user-scroll-y&apos;, this,</span><br><span class="line">&apos;destTop=&apos;, destTop,</span><br><span class="line">&apos;isAtTop=&apos;, isAtTop,</span><br><span class="line">&apos;isAtBottom=&apos;, isAtBottom</span><br><span class="line">);</span><br><span class="line">&#125;)</span><br><span class="line">.bind(</span><br><span class="line">&apos;jsp-user-scroll-x&apos;,</span><br><span class="line">function(event, destLeft, isAtLeft, isAtRight)</span><br><span class="line">&#123;</span><br><span class="line">console.log(</span><br><span class="line">&apos;Handle jsp-user-scroll-x&apos;, this,</span><br><span class="line">&apos;destLeft=&apos;, destLeft,</span><br><span class="line">&apos;isAtLeft=&apos;, isAtLeft,</span><br><span class="line">&apos;isAtRight=&apos;, isAtRight</span><br><span class="line">);</span><br><span class="line">&#125;)</span><br><span class="line">.jScrollPane();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>详细见<a href="http://jscrollpane.kelvinluck.com/events.html" target="_blank" rel="noopener">官方文档</a></p><p>其他资源：<a href="http://www.jq22.com/" target="_blank" rel="noopener">jQuery插件库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日历插件&quot;&gt;&lt;a href=&quot;#日历插件&quot; class=&quot;headerlink&quot; title=&quot;日历插件&quot;&gt;&lt;/a&gt;日历插件&lt;/h2&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.my97.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="jQuery" scheme="https://qiuyuxiu.github.io/MyBlog/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://qiuyuxiu.github.io/MyBlog/tags/jQuery/"/>
    
      <category term="插件" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm管理node版本</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2018/01/08/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2018/01/08/使用nvm管理node版本/</id>
    <published>2018-01-08T06:18:13.000Z</published>
    <updated>2018-06-09T15:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于在做项目的时候，遇到了node版本问题，于是使用nodist管理node版本，由使用版本4的转换到使用版本6，但是解析sass的时候出错了，提示说版本有误，可能是一些插件未随着版本的转换而转换。<br>因此现在我改用了nvm来管理node版本了。</p><p>下载安装nvm<br>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><h2 id="卸载之前的node版本"><a href="#卸载之前的node版本" class="headerlink" title="卸载之前的node版本"></a>卸载之前的node版本</h2><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm<br>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span><br><span class="line">sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录</span><br><span class="line">sudo rm /usr/local/bin/node #删除 node</span><br><span class="line">cd  /usr/local/bin &amp;&amp; ls -l | grep &quot;../lib/node_modules/&quot; | awk &apos;&#123;print $9&#125;&apos;| xargs rm #删除全局 node 模块注册的软链</span><br></pre></td></tr></table></figure></p><p>注意：因为我之前是使用nodist管理的，所以卸载node，先将nodist卸载掉，之后将nodist的所有目录也删除掉。</p><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</code><br>安装完成后请重新打开终端环境，Mac 下推荐使用 oh-my-zsh 代替默认的 bash shell。</p><h2 id="安装切换各版本-node-npm"><a href="#安装切换各版本-node-npm" class="headerlink" title="安装切换各版本 node/npm"></a>安装切换各版本 node/npm</h2><p><code>nvm install stable</code> #安装最新稳定版 node，现在是 5.0.0<br><code>nvm install 4.2.2</code> #安装 4.2.2 版本<br><code>nvm install 0.12.7</code> #安装 0.12.7 版本<br><code>nvm use 0</code> #切换至 0.12.7 版本<br>//安装其他的依赖<br><code>npm install -g react-native-cli</code> #安装 <code>react-native-cli</code> 模块至全局目录</p><h2 id="查看当前的node版本"><a href="#查看当前的node版本" class="headerlink" title="查看当前的node版本"></a>查看当前的node版本</h2><p><code>nvm list</code></p><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><p><code>nvm use &lt;version&gt; [arch]</code><br>文档见 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于在做项目的时候，遇到了node版本问题，于是使用nodist管理node版本，由使用版本4的转换到使用版本6，但是解析sass的时候出错了，提示说版本有误，可能是一些插件未随着版本的转换而转换。&lt;br&gt;因此现在我改用了nvm来管理node版本了。&lt;/p&gt;
&lt;p&gt;下载安装
      
    
    </summary>
    
      <category term="Node" scheme="https://qiuyuxiu.github.io/MyBlog/categories/Node/"/>
    
    
      <category term="Node" scheme="https://qiuyuxiu.github.io/MyBlog/tags/Node/"/>
    
      <category term="nvm" scheme="https://qiuyuxiu.github.io/MyBlog/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>304状态码理解</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2017/12/08/304%E7%8A%B6%E6%80%81%E7%A0%81%E7%90%86%E8%A7%A3/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2017/12/08/304状态码理解/</id>
    <published>2017-12-08T11:19:16.000Z</published>
    <updated>2018-06-09T15:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>1、如果客户端在请求一个文件的时候，发现自己缓存的文件有 Last Modified ，那么在请求中会包含 If Modified Since ，这个时间就是缓存文件的 Last Modified 。因此，如果请求中包含 If Modified Since，就说明已经有缓存在客户端。只要判断这个时间和当前请求的文件的修改时间就可以确定是返回 304 还是 200 。<br>2、对于静态文件，例如：CSS、图片，服务器会自动完成 Last Modified 和 If Modified Since 的比较，完成缓存或者更新。<br>3、对于动态页面，就是动态产生的页面，往往没有包含 Last Modified 信息，这样浏览器、网关等都不会做缓存，也就是在每次请求的时候都完成一个 200 的请求。因此，对于动态页面做缓存加速，首先要在 Response 的 HTTP Header 中增加 Last Modified 定义，其次根据 Request 中的 If Modified Since 和被请求内容的更新时间来返回 200 或者 304 。虽然在返回 304 的时候已经做了一次数据库查询，但是可以避免接下来更多的数据库查询，并且没有返回页面内容而只是一个 HTTP Header，从而大大的降低带宽的消耗，对于用户的感觉也是提高。</p><h2 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h2><p>1、在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记此文件在服务期端最后被修改的时间，格式类似这样：<br>Last-Modified: Fri, 12 May 2006 18:53:33 GMT</p><p>2、客户端第二次请求此URL时，根据 HTTP 协议的规定，浏览器会向服务器传送 If-Modified-Since 报头，询问该时间之后文件是否有被修改过：<br>If-Modified-Since: Fri, 12 May 2006 18:53:33 GMT<br>服务器端的程序先取得这个字段的值，然后与服务器上的数据最后修改时间对比，如果服务器端的资源没有变化，就直接返回 304 Not Modified 状态码，然后停止。这样就节省了传输数据量，达到节省带宽的目的。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p><h2 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a>条件请求</h2><p>当用户访问一个网页时,条件请求可以加速网页的打开时间(因为可以省去传输整个响应体的时间),但仍然会有网络延迟,因为浏览器还是得为每个资源生成一条条件请求,并且等到服务器返回HTTP/304响应,才能读取缓存来显示网页.更理想的情况是,服务器在响应上指定Cache-Control或Expires指令,这样客户端就能知道该资源的可用时间为多长,也就能跳过条件请求的步骤,直接使用缓存中的资源了.<br>在下列情况下仍然需要使用条件请求<br>1)在超过服务器指定的过期时间之后<br>2)如果用户执行了刷新操作的话</p><h2 id="last-modified-if-modified-since"><a href="#last-modified-if-modified-since" class="headerlink" title="last-modified/if-modified-since"></a>last-modified/if-modified-since</h2><p>last-modified:表示这个响应资源的最后修改时间。<br>if-modified-since:当资源过期了(max-age)，发现资源有last-modified声明，则再次向服务器请求带上头部if-modified-since表示请求时间。<br>web服务器收到之后发现有头部if-modified-since，则与last-modified比较，如果last-modified比较新，则改动过，则响应整片内容；如果last-modified比较旧，则无修改，响应http304状态码，告诉浏览器继续使用所保存的cache。</p><p>除了使用ETag/If-None-Match/If-Match通过文件内容来缓存外，还可以使用Last-Modified/If-Modified-Since通过文件修改时间来进行缓存。 这两者都需要客户端再次发送HTTP请求，如果文件未发生改变，服务器返回304。<br>而另外一种缓存策略Expires/Cache-Control则可以让客户端避免再次发送请求。一般会优先使用Cache-Control，它能够更加精细地控制缓存策略。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h2&gt;&lt;p&gt;1、如果客户端在请求一个文件的时候，发现自己缓存的文件有 Last Modified ，那么在请求中会包含 If Modified Sinc
      
    
    </summary>
    
      <category term="状态码" scheme="https://qiuyuxiu.github.io/MyBlog/categories/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
    
      <category term="状态码" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HTTP报文</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2017/11/08/HTTP%E6%8A%A5%E6%96%87/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2017/11/08/HTTP报文/</id>
    <published>2017-11-08T11:19:33.000Z</published>
    <updated>2018-06-09T15:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报文的组成部分"><a href="#报文的组成部分" class="headerlink" title="报文的组成部分"></a>报文的组成部分</h2><p>报文由三个部分组成：对报文进行描述的起始行，包含属性的首部块，以及可选的、包含数据的主体部分。<br><img src="../../../../images/pic4.png" alt="报文组成部分"><br>报文的语法:<br>所有的报文分为两类：请求报文，响应报文。</p><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><p>一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成<br>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;method&gt;&lt;request-URL&gt;&lt;version&gt;</span><br><span class="line">&lt;headers&gt;</span><br><span class="line">//空行</span><br><span class="line">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure></p><p>1.请求行：请求方法，链接，HTTP版本。<br>GET<br>GET最常见的一种请求方式，当客户端要从服务器中读取文档时，当点击网页上的链接或者通过在浏览器的地址栏输入网址来浏览网页的，使用的都是GET方式。GET方法要求服务器将URL定位的资源放在响应报文的数据部分，回送给客户端。<br>由于GET请求是在URL可见的，所以这种方式不适合传送私密数据。另外，由于不同的浏览器对地址的字符限制也有所不同，一般最多只能识别1024个字符，所以如果需要传送大量数据的时候，也不适合使用GET方式。</p><p>POST<br>使用POST方法可以允许客户端给服务器提供信息较多。POST方法将请求参数封装在HTTP请求数据中，以名称/值的形式出现，可以传输大量数据，这样POST方式对传送的数据大小没有限制，而且也不会显示在URL中。<br>POST方式请求行中不包含数据字符串，这些数据保存在”请求内容”部分，各数据之间也是使用”&amp;”符号隔开。POST方式大多用于页面的表单中。<br>2.请求头部：请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息。<br>3.空行<br>最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。<br>4.请求数据<br>请求数据不在GET方法中使用，而是在POST方法中使用</p><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p>HTTP响应也由三个部分组成，分别是：状态行、消息报头、响应正文<br>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;version&gt;&lt;status-code&gt;&lt;reason-phrase&gt;</span><br><span class="line">&lt;headers&gt;</span><br><span class="line">//空行</span><br><span class="line">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure></p><h2 id="报文各部分说明"><a href="#报文各部分说明" class="headerlink" title="报文各部分说明"></a>报文各部分说明</h2><p><code>&lt;method&gt;</code>: 客户端希望服务器对资源执行的动作，GET,POST…<br><code>&lt;request-URL&gt;</code>: 命名了所请求资源，或者URL路径组件的完整URL。<br><code>&lt;version&gt;</code>: 报文所使用的HTTP版本，HTTP/.<br><code>&lt;status-code&gt;</code>: 状态码<br><code>&lt;reason-phrase&gt;</code>: 状态码说明<br><code>&lt;header&gt;</code>: 首部<br><code>&lt;entity-body&gt;</code>: 实体的主体部分</p><h2 id="报文首部说明"><a href="#报文首部说明" class="headerlink" title="报文首部说明"></a>报文首部说明</h2><p>通用首部：既可以出现在请求报文中，也可以出现在响应报文中。<br>请求首部：提供更多的有关请求的信息。<br>响应首部：提供更多的有关响应的信息。<br>实体首部：描述主体的长度和内容，或者资源自身。<br>扩展首部：规范中没有定义的新首部。</p><h4 id="通用首部"><a href="#通用首部" class="headerlink" title="通用首部"></a>通用首部</h4><p>Connection,Date,MIME-Version,Trailer,Transfer-Encoding,Update,Via<br>通用缓存首部：Cache-Control,Pragma</p><h4 id="请求首部"><a href="#请求首部" class="headerlink" title="请求首部"></a>请求首部</h4><p>Accept首部:<br>Accept:text/html (告诉服务器能够发送哪些媒体类型)<br>Accept-Charset: (告诉服务器能够发送哪些字符集)<br>Accept-Encoding:gzip, deflate (告诉服务器能够发送哪些编码方式)<br>Accept-Language:zh-CN,zh;q=0.8 (告诉服务器能够发送哪些语言)</p><h4 id="条件请求首部："><a href="#条件请求首部：" class="headerlink" title="条件请求首部："></a>条件请求首部：</h4><p>Expect,If-Match,If-Modified-Since…</p><h4 id="安全请求首部："><a href="#安全请求首部：" class="headerlink" title="安全请求首部："></a>安全请求首部：</h4><p>Authorization,Cookie…</p><h4 id="代理请求首部："><a href="#代理请求首部：" class="headerlink" title="代理请求首部："></a>代理请求首部：</h4><p>Max-Forward,Proxy-Authorization,Proxy-Connection</p><h4 id="响应首部"><a href="#响应首部" class="headerlink" title="响应首部"></a>响应首部</h4><p>协商首部，安全响应首部</p><h4 id="实体首部"><a href="#实体首部" class="headerlink" title="实体首部"></a>实体首部</h4><p>内容首部，实体缓存首部</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报文的组成部分&quot;&gt;&lt;a href=&quot;#报文的组成部分&quot; class=&quot;headerlink&quot; title=&quot;报文的组成部分&quot;&gt;&lt;/a&gt;报文的组成部分&lt;/h2&gt;&lt;p&gt;报文由三个部分组成：对报文进行描述的起始行，包含属性的首部块，以及可选的、包含数据的主体部分。&lt;br
      
    
    </summary>
    
      <category term="HTTP" scheme="https://qiuyuxiu.github.io/MyBlog/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://qiuyuxiu.github.io/MyBlog/tags/HTTP/"/>
    
      <category term="报文" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E6%8A%A5%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码与方法</title>
    <link href="https://qiuyuxiu.github.io/MyBlog/2017/08/08/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>https://qiuyuxiu.github.io/MyBlog/2017/08/08/HTTP状态码与方法/</id>
    <published>2017-08-08T08:21:20.000Z</published>
    <updated>2018-06-09T14:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了《HTTP权威指南》之后，整理些笔记。</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><h4 id="100-199信息性状态码"><a href="#100-199信息性状态码" class="headerlink" title="100~199信息性状态码"></a>100~199信息性状态码</h4><p>100：continue 说明收到了请求的初始部分，请客户端继续。发送了这个状态码之后，服务器在收到请求之后必须响应。<br>101：Switching Protocols 说明服务器正在根据客户端的指定，将协议切换成update首部所列的协议。</p><h4 id="200-299成功状态码"><a href="#200-299成功状态码" class="headerlink" title="200~299成功状态码"></a>200~299成功状态码</h4><p>200：OK 请求没问题，实体的主体部分包含了所请求的资源。<br>201：Create 用于创建服务器对象的请求（比如PUT）。响应的实体主体部分中应该包含各种引用了已创建的资源的URL，location首部包含的则是最具体的引用。<br>202：Accepted 请求已被接受，但服务器还未对其执行任何动作，不能保证服务器会完成这个请求。</p><h4 id="300-399重定向状态码"><a href="#300-399重定向状态码" class="headerlink" title="300~399重定向状态码"></a>300~399重定向状态码</h4><p>300：Multiple Choices 客户端请求一个实际指向多个资源的URL时会返回这个状态码。<br>301 Moved Permanently 在请求的URL已被移除时使用，相应的location首部中应该包含资源现在所处的URL。<br>302 Found 与301状态码类似，但是，客户端应该使用location首部给出的URL来临时定位资源，将来的请求仍应使用老的URL。<br>303 see Other 告知客户端应该用另一个URL来获取资源。新的URL位于响应报文的location首部，其主要目的是允许post请求的响应将客户端定向到某个资源。<br>304 Not Modified 请求的资源未修改过。<br>307 Temporary 与301类似，但客户端应该使用location首部给出的URL来临时定位资源。</p><h4 id="400-499客户端错误状态码"><a href="#400-499客户端错误状态码" class="headerlink" title="400~499客户端错误状态码"></a>400~499客户端错误状态码</h4><p>400：Bad Request 用于告知客户端它发送了一个错误的请求<br>401：无权限<br>403:Forbidden 请求被服务器拒绝了。可查看实体的主体部分来知道为何。<br>404：Not Found 服务器无法找到所请求的资源</p><h4 id="500-599服务器错误状态码"><a href="#500-599服务器错误状态码" class="headerlink" title="500~599服务器错误状态码"></a>500~599服务器错误状态码</h4><p>500：Internal Server Error 服务器遇到一个妨碍它提供服务的错误<br>501：Not Implemented 客户端发起请求超出服务器的能力范围<br>502：Bad Gateway<br>503: Service Unavailable 说明服务器现在无法为请求提供服务，但将来可以</p><p>详细见W3school:<a href="http://www.w3school.com.cn/tags/html_ref_httpmessages.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_httpmessages.asp</a></p><h2 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h2><h4 id="什么是-HTTP？"><a href="#什么是-HTTP？" class="headerlink" title="什么是 HTTP？"></a>什么是 HTTP？</h4><p>超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。<br>HTTP 的工作方式是客户机与服务器之间的请求-应答协议。<br>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</p><h4 id="两种-HTTP-请求方法：GET-和-POST"><a href="#两种-HTTP-请求方法：GET-和-POST" class="headerlink" title="两种 HTTP 请求方法：GET 和 POST"></a>两种 HTTP 请求方法：GET 和 POST</h4><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。<br>GET - 从指定的资源请求数据。<br>POST - 向指定的资源提交要被处理的数据</p><h4 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h4><p>查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：<br>GET 请求可被缓存<br>GET 请求保留在浏览器历史记录中<br>GET 请求可被收藏为书签<br>GET 请求不应在处理敏感数据时使用<br>GET 请求有长度限制<br>GET 请求只应当用于取回数据</p><h4 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h4><p>查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：<br>POST 请求不会被缓存<br>POST 请求不会保留在浏览器历史记录中<br>POST 不能被收藏为书签<br>POST 请求对数据长度没有要求</p><h4 id="其他请求方法："><a href="#其他请求方法：" class="headerlink" title="其他请求方法："></a>其他请求方法：</h4><p>HEAD 与 GET 相同，但只返回 HTTP 报头，不返回文档主体。<br>PUT 上传指定的 URI 表示。<br>DELETE 删除指定资源。<br>OPTIONS 返回服务器支持的 HTTP 方法。<br>CONNECT 把请求连接转换到透明的 TCP/IP 通道</p><h2 id="GET-与-POST-区别："><a href="#GET-与-POST-区别：" class="headerlink" title="GET 与 POST 区别："></a>GET 与 POST 区别：</h2><p>GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。<br>GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。<br>GET编码类型application/x-www-form-url，POST编码类型encodedapplication/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。<br>GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。<br>GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。<br>GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。<br>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。<br>GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了《HTTP权威指南》之后，整理些笔记。&lt;/p&gt;
&lt;h2 id=&quot;HTTP状态码&quot;&gt;&lt;a href=&quot;#HTTP状态码&quot; class=&quot;headerlink&quot; title=&quot;HTTP状态码&quot;&gt;&lt;/a&gt;HTTP状态码&lt;/h2&gt;&lt;h4 id=&quot;100-199信息性状态码&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="HTTP" scheme="https://qiuyuxiu.github.io/MyBlog/categories/HTTP/"/>
    
    
      <category term="状态码" scheme="https://qiuyuxiu.github.io/MyBlog/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
      <category term="HTTP" scheme="https://qiuyuxiu.github.io/MyBlog/tags/HTTP/"/>
    
  </entry>
  
</feed>
